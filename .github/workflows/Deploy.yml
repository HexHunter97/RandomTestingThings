# flow:
# - check if version is existing version
# - if existing version, pull it, otherwise, pull latest
# - if latest, add tag
# - set version in appsettings.json
# - build docker image
# - hand over execution to DeployImage.yml

name: Deploy

on:
  pull_request_target:
    types:
      - closed
    branches:
      - master
  workflow_dispatch:
    inputs:
      version_number:
        description: Version number for the release
        required: false
        default: ''

jobs:
  pull:
    name: Pull repository
    runs-on: self-hosted
    steps:
    - name: Checkout
      uses: actions/checkout@v2.4.2
        
  bumpVersion:
    needs: pull
    name: Bump version
    runs-on: self-hosted
    steps:
    - if: ${{ github.event.inputs.version_number != '' }}
      id: manualVersion
      name: Manual version
      uses: mathieudutour/github-tag-action@v6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        custom_tag: ${{ github.event.inputs.version_number }}
        tag_prefix: ''
    - if: ${{ github.event.inputs.version_number == '' }}
      id: autoVersion
      name: Automatic version
      uses: mathieudutour/github-tag-action@v6.0
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tag_prefix: ''
        default_prerelease_bump: prepatch
        append_to_pre_release_tag: 'false'
    outputs:
      version: ${{ steps.autoVersion.outputs.new_tag || steps.manualVersion.outputs.new_tag }}

  applyVersion:
    needs: bumpVersion
    name: Apply version
    runs-on: self-hosted
    steps:
    - name: Client appsettings.json
      run: "sed -ir 's/^  \"version\": \"local\"/  \"version\": \"${{ needs.bumpVersion.outputs.version }}\"/' ArmaReforger.WorkshopBrowser/Client/wwwroot/appsettings.json"

  build:
    needs: applyVersion
    name: Build image
    runs-on: self-hosted
    steps:
    - run: |
        "docker build -f Dockerfile . -t workshopbrowser:${{ needs.bumpVersion.outputs.version }}"
        "docker save workshopbrowser:${{ needs.bumpVersion.outputs.version }} -o workshopbrowser.tar"
        "microk8s ctr image import workshopbrowser.tar"
        "rm workshopbrowser.tar"
        "docker image prune -f"
        "docker rmi -f $(docker images workshopbrowser -q)"
  
  deploy:
    needs: build
    name: Deploy image
    runs-on: self-hosted
    steps:
    - uses: ./.github/workflows/DeployImage.yml
      with:
        version_number: ${{ needs.bumpVersion.outputs.version }}
    
